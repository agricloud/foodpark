/*
 * File: app/controller/CommonController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('foodpark.controller.CommonController', {
    extend: 'Ext.app.Controller',

    doShowWithImage: function(callback) {
        this.getImageUploader().emptyImage();

        var that = this;
        this.doShow(function(success, form, action){
            if(success){

                if (callback && callback instanceof Function) {
                    callback(true, form, action,function(){
                        that.setImageUploader();//更新imageUploader domainId
                    });
                }
                else
                that.setImageUploader();//更新imageUploader domainId
            }
            else{
                if (callback && callback instanceof Function){
                    callback(false, form, action,function(){
                        that.getImageUploader().setDomainId(null);
                    });
                }
                else
                that.getImageUploader().setDomainId(null);
            }
        });
    },

    doShow: function(callback) {
        console.log('commonController--'+this.domainName+'--doShow');

        var that = this;
        var record = this.getMainGrid().getSelectionModel().getSelection()[0];
        var id = -1;

        if(this.getMainGrid().getSelectionModel().getSelection()[0])
        id = record.data.id;

        this.getMainForm().getForm().reset(true);

        this.getMainForm().getForm().load({
            url: this.getRoot()+'/'+this.domainName+'/show/'+id,
            params: this.getParams(),
            waitMsg: Utilities.getMsg('default.message.load'),
            success: function(form, action) {

                that.activeEditor();
                that.actionName = 'update';

                if(form.findField('typeName')&&form.findField('name')){
                    form.findField('typeName').setReadOnly( true );
                    form.findField('name').setReadOnly( true );
                }

                if (callback && callback instanceof Function) {
                    callback(true, form, action);
                }
            },

            failure: function(form, action) {
                Ext.MessageBox.alert('Failure', action.result.message);
                if (callback && callback instanceof Function){
                    callback(false, form, action);
                }
            }
        });
    },

    doCreateWithImage: function() {
        this.getImageUploader().emptyImage();
        this.getImageUploader().setDomainId(null);

        this.doCreate();
    },

    doCreate: function(callback) {
        console.log('commonController--'+this.domainName+'--doCreate');
        var that = this;

        var params = this.getParams();
        params[this.masterKey] = this.masterId;
        this.getMainForm().getForm().reset(true);

        this.getMainForm().getForm().load({
            url: this.getRoot()+'/'+this.domainName+'/create',
            params: params,
            success: function(form, action) {
                that.actionName = 'save';
                that.activeEditor();
                that.getMainForm().up('panel[itemId=show]').down('commondeletebtn').setDisabled(true);
                that.getMainForm().up('panel[itemId=show]').down('commonprintbtn').setDisabled(true);

                if(form.findField('typeName')&&form.findField('name')){
                    form.findField('typeName').setReadOnly( false );
                    form.findField('name').setReadOnly( false );
                }

                if (callback && callback instanceof Function) {
                    callback(true, form, action);
                }
            },

            failure: function(form, action) {
                Ext.MessageBox.alert('Failure', action.result.message);

                if (callback && callback instanceof Function) {
                    callback(false, form, action);
                }
            }

        });
    },

    doDelete: function(callback, msg) {
        var that = this ;

        var msgBox = Ext.Msg;
        msgBox.buttonText={
            no: Utilities.getMsg('default.message.no'),
            yes: Utilities.getMsg('default.message.yes')
        };

        //default msg
        if(typeof msg!="string" || msg=="")
        msg = 'default.message.deleteConfirm';

        msgBox.confirm('Confirm delete', Utilities.getMsg(msg), function(e)
        {
            if(e == 'yes')
            {
                that.actionName='delete';
                that.submitForm(function(success){
                    if(success){
                        that.activeGrid();
                        that.actionName = '' ;
                        that.getMainGrid().getStore().reload();
                        that.disableShowBtn();
                    }

                    that.actionName ='update';

                    if (callback && callback instanceof Function) {
                        callback(success);
                    }

                });
            }
        });
    },

    doSave: function(callback) {

        console.log('commonController--'+this.domainName+'--doSave');
        var that = this ;

        this.submitForm(function(success){
            if(success){

                that.getMainGrid().getStore().reload();
                that.activeGrid();

                if(that.actionName === 'save'){
                    that.actionName = '' ;
                    if(that.getMainForm().up().down('[itemId=detailGrid]')){
                        that.enableDetailCreateBtn();
                    }
                }

                if (callback && callback instanceof Function) {
                    callback(success);
                }
            }

        });
    },

    doIndexDetail: function(obj, record, index, eOpts) {
        this.masterId = record.data.id;

        console.log('commonController--'+this.domainName+'/'+this.masterId+'--doIndexDetail');

        var grid = this.getMainGrid();

        grid.getStore().data.clear();

        var params = {};
        params[this.masterKey] = this.masterId;

        grid.getStore().getProxy().extraParams = params;
        grid.getStore().load();
    },

    submitForm: function(callback) {
        console.log('/'+this.domainName+'/'+this.actionName);

        var message;
        if(this.actionName=='save')
            message = "default.message.save";
        else if(this.actionName=='delete')
            message = "default.message.delete";
        else if(this.actionName=='update')
            message = "default.message.update";

        this.getMainForm().getForm().submit({
            url: this.getRoot()+'/'+this.domainName+'/'+this.actionName,
            params: this.getParams(),
            submitEmptyText: false,
            waitMsg: Utilities.getMsg(message),
            success: function(form,action) {
                Ext.MessageBox.alert('Success',action.result.message);

                if (callback) {
                    callback(true, form, action);
                }

            },
            failure: function(form, action) {

                var msg ="";
                for(var key in action.result.errors){
                    msg+=action.result.errors[key]+"<br>";
                }
                msg = action.result.message+'<br>'+msg;
                Ext.MessageBox.alert('Failure', msg);
                if (callback) {
                    callback(false, form, action);
                }
            }
        });
    },

    activeGrid: function() {
        this.getMainForm().up('panel[itemId=show]').up().getLayout().setActiveItem(this.getMainGrid().down().up("panel[itemId=index]"));
    },

    activeEditor: function() {
        if(this.getMainForm().up('panel[itemId=show]').down('commondeletebtn'))
            this.getMainForm().up('panel[itemId=show]').down('commondeletebtn').setDisabled(false);
        if(this.getMainForm().up('panel[itemId=show]').down('commonprintbtn'))
            this.getMainForm().up('panel[itemId=show]').down('commonprintbtn').setDisabled(false);
        this.getMainForm().up('panel[itemId=show]').up().getLayout().setActiveItem(this.getMainForm().up('panel[itemId=show]'));
    },

    doCancel: function(callback) {
        this.getMainForm().getForm().reset(true);
        this.activeGrid();
        if(this.getMainForm().up().down('[itemId=detailGrid]')){
            this.enableDetailCreateBtn();
        }
        if (callback && callback instanceof Function) {
            callback();
        }
    },

    setImageUploader: function() {
        //console.log(this.getImageUploader());
        var record= this.getMainForm().down('field[name=id]');
        this.getImageUploader().setDomainId(record.value);
        this.getImageUploader().showImage();
    },

    disableShowBtn: function() {
        this.getMainGrid().up('panel[itemId=index]').down('commonshowbtn').setDisabled(true);
    },

    enableShowBtn: function() {
        this.getMainGrid().up('panel[itemId=index]').down('commonshowbtn').setDisabled(false);
    },

    getRoot: function() {
        return '';
    },

    getParams: function() {
        if(this.domainName == 'foodpaint')
            return {foodpaintController: this.foodpaintController};
        else return {};
    },

    doCreateAndIndexDetail: function(callback) {
        var that=this;

        this.doCreate(function(success,form,action){
            //單頭單身合併時 需將單身store移除
            that.getDetailGrid().getStore().removeAll();
            that.disableDetailCreateBtn();
            that.disableDetailShowBtn();

            if (callback && callback instanceof Function) {
                callback(success, form, action);
            }
        });
    },

    doShowAndIndexDetail: function(callback) {
        var that=this;
        this.doShow(function(success, form, action){

            if (callback && callback instanceof Function) {
                callback(true, form, action);
            }

            var record = that.getMainGrid().getSelectionModel().getSelection()[0];
            that.masterId = record.data.id;

            console.log('commonController--'+that.domainName+'/'+that.masterId+'--doShowAndIndexDetail');

            var grid = that.getDetailGrid();

            grid.getStore().data.clear();

            var params = {};
            params[that.masterKey] = that.masterId;


            grid.getStore().getProxy().extraParams = params;
            grid.getStore().load();

        });
    },

    doShowDetail: function(callback) {
        console.log('commonController--'+this.domainName+'--doShowDetail');

        var that = this;
        var record= this.getDetailGrid().getSelectionModel().getSelection()[0];
        var id = -1;

        if(this.getDetailGrid().getSelectionModel().getSelection()[0])
            id = record.data.id;

        this.getDetailForm().getForm().reset(true);

        this.getDetailForm().getForm().load({
            url: this.getRoot()+'/'+this.domainName+'/show/'+id,
            params: this.getDetailParams(),
            waitMsg: Utilities.getMsg('default.message.load'),
            success: function(form, action) {

                that.activeDetailEditor();
                that.detailActionName = 'update';

                if (callback && callback instanceof Function) {
                    callback(true, form, action);
                }
            },

            failure: function(form, action) {
                Ext.MessageBox.alert('Failure', action.result.message);
                if (callback && callback instanceof Function){
                    callback(false, form, action);
                }
            }
        });
    },

    doCreateDetail: function(callback) {
        console.log('commonController--'+this.domainName+'--doCreateDetail');
        var that = this;

        var params = this.getDetailParams();
        params[this.masterKey] = this.masterId;
        this.getDetailForm().getForm().reset(true);

        this.getDetailForm().getForm().load({
            url: this.getRoot()+'/'+this.domainName+'/create',
            params: params,
            success: function(form, action) {
                that.detailActionName = 'save';
                that.activeDetailEditor();
                that.getDetailForm().up('panel[itemId=showDetail]').down('commondeletebtn').setDisabled(true);

                if (callback && callback instanceof Function) {
                    callback(true, form, action);
                }

            },

            failure: function(form, action) {
                Ext.MessageBox.alert('Failure', action.result.message);
            }

        });
    },

    doDeleteDetail: function() {
        var that = this ;

        var msg = Ext.Msg;
        msg.buttonText = {
            no: Utilities.getMsg('default.message.no'),
            yes: Utilities.getMsg('default.message.yes')
        };

        msg.confirm('Confirm delete', Utilities.getMsg('default.message.deleteConfirm'), function(e)
        {
            if(e=='yes')
            {
                that.detailActionName = 'delete';
                that.submitDetailForm(function(success){
                    if(success){
                        that.detailActionName = '' ;
                        that.getMainGrid().getStore().reload();
                        that.getDetailGrid().getStore().reload();
                        that.doShow();
                        //that.activeDetailGrid();
                        that.disableDetailShowBtn();
                    }
                    that.detailActionName = 'update';

                });
            }
        });
    },

    doSaveDetail: function() {
        console.log('commonController--'+this.domainName+'--doSave');
        var that = this ;

        this.submitDetailForm(function(success){
            if(success){

                that.getMainGrid().getStore().reload();
                that.getDetailGrid().getStore().reload();
                that.doShow();
                //that.activeDetailGrid();
                if(that.detailActionName=='save'){
                    that.detailActionName = '' ;
                }
            }

        });
    },

    activeDetailEditor: function() {
        if(this.getDetailForm().up('panel[itemId=showDetail]').down('commondeletebtn'))
            this.getDetailForm().up('panel[itemId=showDetail]').down('commondeletebtn').setDisabled(false);
        this.getDetailForm().up('panel[itemId=showDetail]').up().getLayout().setActiveItem(this.getDetailForm().up('panel[itemId=showDetail]'));
    },

    activeDetailGrid: function() {
        this.getDetailForm().up('panel[itemId=showDetail]').up().getLayout().setActiveItem(this.getDetailGrid().down().up("panel[itemId=show]"));
    },

    doCancelDetail: function() {
        this.getDetailForm().getForm().reset(true);
        this.activeDetailGrid();
    },

    enableDetailShowBtn: function() {
        this.getDetailGrid().up('panel[itemId=indexDetail]').down('commonshowbtn').setDisabled(false);
    },

    disableDetailShowBtn: function() {
        this.getDetailGrid().up('panel[itemId=indexDetail]').down('commonshowbtn').setDisabled(true);
    },

    getDetailParams: function() {
        if(this.domainName=='foodpaint')
            return {foodpaintController: this.foodpaintDetController};
        else return {};
    },

    submitDetailForm: function(callback) {
        console.log('/'+this.domainName+'/'+this.detailActionName);

        var message;
        if(this.detailActionName=='save')
            message = "default.message.save";
        else if(this.detailActionName=='delete')
            message = "default.message.delete";
        else
            message = "default.message.update";

        this.getDetailForm().getForm().submit({
            url: this.getRoot()+'/'+this.domainName+'/'+this.detailActionName,
            params: this.getDetailParams(),
            submitEmptyText: false,
            waitMsg: Utilities.getMsg(message),
            success: function(form, action) {
                Ext.MessageBox.alert('Success', action.result.message);

                if (callback) {
                    callback(true, form, action);
                }

            },
            failure: function(form, action) {
                var msg ="";
                for(var key in action.result.errors){
                    msg+=action.result.errors[key];
                }
                msg = action.result.message+'<br>'+msg;
                Ext.MessageBox.alert('Failure', msg);
                if (callback) {
                    callback(false, form, action);
                }
            }
        });
    },

    enableDetailCreateBtn: function() {
        this.getDetailGrid().up('panel[itemId=indexDetail]').down('commoncreatebtn').setDisabled(false);
    },

    disableDetailCreateBtn: function() {
        this.getDetailGrid().up('panel[itemId=indexDetail]').down('commoncreatebtn').setDisabled(true);
    },

    doPrint: function() {
        var id = -1;
        if(this.getMainForm().getForm().findField('id'))
            id = this.getMainForm().getForm().findField('id').getValue();
        var queryParams='';
        if(this.domainName=='foodpaint')
            queryParams = '&foodpaintController='+this.foodpaintController;

        window.open(this.getRoot()+'/'+this.domainName+'/print?id='+id+queryParams);
    }

});